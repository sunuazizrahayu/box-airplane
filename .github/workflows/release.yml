name: Create or Update Release

on:
  push:
    tags:
      - 'v*' # Trigger hanya untuk tag yang diawali dengan 'v'

jobs:
  release:
    name: Create or Update Release
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Pastikan semua data git history diambil

      # Set environment variable
      - name: Configure environment variable
        run: |
          echo "MODULE_PROP=module.prop" >> $GITHUB_ENV
          echo "ZIP_NAME=box-airplane_${{ github.ref_name }}.zip" >> $GITHUB_ENV
          echo "Environment variables set globally."


      # Periksa apakah release dengan tag sudah ada
      - name: Check if release exists
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_EXISTS=$(gh release view ${{ github.ref_name }} --json id --jq '.id' || echo "")
          echo "RELEASE_EXISTS=$RELEASE_EXISTS" >> $GITHUB_ENV

      # Buat release jika belum ada
      - name: Create release if not exists
        if: env.RELEASE_EXISTS == ''
        run: |
          # Login dengan token GitHub CLI
          gh auth login --with-token <<< "${{ secrets.PERSONAL_ACCESS_TOKEN }}"

          # Membuat release tanpa file build
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "Auto-generated release for tag ${{ github.ref_name }}"


      # Update module.prop
      - name: Update module.prop
        run: |
          # Build Info
          BUILD_DATE=$(TZ='Asia/Jakarta' date +"%Y-%m-%d %H:%M:%S")
          BUILD_TIMESTAMP=$(date +%s)
          VERSION_STRING="${{ github.ref_name }} ($BUILD_DATE GMT+7)"
          VERSION_CODE="$BUILD_TIMESTAMP"


          # Set version
          echo "Set version"
          if grep -q "^version=" "$MODULE_PROP"; then
            # override
            sed -i "s|^version=.*|version=$VERSION_STRING|" "$MODULE_PROP"
          else
            # append
            echo "version=$VERSION_STRING" >> "$MODULE_PROP"
          fi


          # Set version code
          echo "Set version code"
          if grep -q "^versionCode=" "$MODULE_PROP"; then
            # override
            sed -i "s|^versionCode=.*|versionCode=$VERSION_CODE|" "$MODULE_PROP"
          else
            # append
            echo "versionCode=$VERSION_CODE" >> "$MODULE_PROP"
          fi


          # Result
          echo "module.prop result:"
          cat $MODULE_PROP


      # Release: Buat file ZIP dengan mengecualikan `.github`
      - name: Create zip file
        run: |
          mkdir -p build

          # build with github head
          # git archive --format=zip --output="build/$ZIP_NAME" HEAD ':!/.github'

          # build manual
          zip -r "build/$ZIP_NAME" . \
            -x ".git/*" \
            -x ".github/*" \
            -x ".gitattributes" \
            -x "build/*"

          echo "Build results"
          ls -la build

      # Release: Create Changelog
      - name: Create CHANGELOG.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ambil changelog menggunakan GitHub CLI
          TAG="${{ github.ref_name }}"
          CHANGELOG=$(gh release view "$TAG" --json body -q .body)
          echo "$CHANGELOG" > build/CHANGELOG.md

      # Release: Create update.json file
      - name: create update.json
        run: |
          # ambil data dari module.prop
          VERSION=$(grep 'version=' $MODULE_PROP | cut -d '=' -f 2)
          VERSION_CODE=$(grep 'versionCode=' $MODULE_PROP | cut -d '=' -f 2)
          DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ github.ref_name }}/${{ env.ZIP_NAME }}"
          CHANGEURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/latest/download/CHANGELOG.md"

          if [ -z "$VERSION" ]; then
            VERSION="${{ github.ref_name }}"
          fi

          # update.json
          cat > update.json <<EOF
          {
            "version": "$VERSION",
            "versionCode": "$VERSION_CODE",
            "zipUrl": "$DLURL",
            "changelog": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/latest/download/CHANGELOG.md"
          }
          EOF

          echo "update.json Result:"
          cat update.json
          mv update.json build/


      # Release: Upload asset ke release
      - name: Upload asset to existing release
        if: env.RELEASE_EXISTS != ''
        run: |
          # Login dengan token GitHub CLI
          gh auth login --with-token <<< "${{ secrets.PERSONAL_ACCESS_TOKEN }}"

          # upload release
          #gh release upload ${{ github.ref_name }} build/${{ env.ZIP_NAME }} --clobber
          #gh release upload ${{ github.ref_name }} build/update.json --clobber
          #gh release upload ${{ github.ref_name }} build/CHANGELOG.md --clobber

          gh release upload ${{ github.ref_name }} build/* --clobber


      # # Step 11: Commit UPDATE
      # - name: Commit and Push update
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     # Menyiapkan Git user
      #     git config --global user.email "action@github.com"
      #     git config --global user.name "github-actions[bot]"

      #     # Pastikan berada di branch main
      #     git checkout master

      #     # Commit hanya file update.json
      #     git commit -am "${{ github.ref_name }}" || echo "Tidak ada perubahan untuk di-commit."

      #     # Push perubahan ke remote branch release
      #     git push origin master